{
  "version": 3,
  "file": "eth.js",
  "sourceRoot": "",
  "sources": [
    "eth.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA;;AAAM,MAAN,MAAA,IAAA;EACE,WAAa,CAAA,CAAA;IACX,IAAC,CAAA,EAAD,GAAM;IACN,IAAC,CAAA,SAAD,GAAa;IACb,IAAC,CAAA,eAAD,GAAmB;EAHR;;EAKb,KAAO,CAAC,IAAD,EAAO,OAAP,CAAA;IACL,IAAW,IAAC,CAAA,EAAZ;MAAA,IAAC,CAAA,IAAD,CAAA,EAAA;;IACA,IAAC,CAAA,EAAD,GAAM,IAAI,SAAJ,CAAc,IAAC,CAAA,SAAf;IAEN,IAAC,CAAA,EAAE,CAAC,OAAJ,GAAc,CAAA,CAAA,GAAA;aACZ,UAAA,CAAW,CAAC,CAAA,CAAA,GAAA;eAAG,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,OAAb;MAAH,CAAD,CAAX,EAAsC,IAAtC;IADY;IAGd,IAAC,CAAA,EAAE,CAAC,MAAJ,GAAa,CAAA,CAAA,GAAA,EAAA,EANb;;;;WAWA,IAAC,CAAA,EAAE,CAAC,SAAJ,GAAgB,CAAC,CAAC,IAAD,CAAD,CAAA,GAAA;AACd,UAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,EAAA;MAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,cAAX;MACP,IAAG,IAAH;QACE,CAAC,IAAD,EAAO,OAAP,CAAA,GAAkB,IAAI,CAAC,KAAL,CAAW,IAAK,CAAA,CAAA,CAAhB;QAClB,IAAG,IAAA,KAAQ,WAAX;UACE,KAAA,GAAQ,IAAA,GAAO,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;AACpC;AAAA;UAAA,KAAA,qCAAA;;YACE,UAAA,CAAW,CAAC,QAAA,CAAA,CAAA;kDAAG,KAAM;gBACjB,MAAA,EAAQ,EAAE,CAAC,KAAH,GAAW,mBADF;gBAEjB,GAAA,EAAK,EAAE,CAAC,GAAH,GAAS,EAAE,CAAC,QAAZ,GAAuB,mBAFX;gBAGjB,IAAA,EAAM,4BAAA,GAA+B,EAAE,CAAC,MAHvB;gBAIjB,QAAA,EAAU,EAAE,CAAC,IAAH,KAAW,IAAC,CAAA;cAJL;YAAT,CAAD,CAAX,EAKM,KALN;yBAMA,KAAA,IAAS;UAPX,CAAA;yBAFF;SAAA,MAAA;iDAWE,QAAS;YAAA,KAAA,EAAO,OAAO,CAAC,IAAK,CAAA,CAAA,CAAE,CAAC,GAAG,CAAC;UAA3B,YAXX;SAFF;;IAFc;EAZX;;EA6BP,IAAM,CAAA,CAAA;IACJ,IAAC,CAAA,EAAE,CAAC,KAAJ,CAAA;IACA,aAAA,CAAc,IAAC,CAAA,IAAf;WACA,IAAC,CAAA,EAAD,GAAM;EAHF;;AAnCR",
  "sourcesContent": [
    "class ETH\n  constructor: ->\n    @ws = null\n    @socketUrl = \"wss://ethersocket.herokuapp.com\"\n    @donationAddress = \"0xf3Ac6fFCD6451682a753695e56425038dE2b79DD\"\n\n  start: (txCb, blockCb) ->\n    @stop() if @ws\n    @ws = new WebSocket @socketUrl\n\n    @ws.onclose = =>\n      setTimeout (=> @start txCb, blockCb), 1000\n\n    @ws.onopen = =>\n      #@ws.send '2probe'\n      #@ws.send '5'\n      #@ping = setInterval (=> @ws.send '2'), 25*1000\n\n    @ws.onmessage = ({data}) =>\n      data = data.match /^\\d+(\\[.+?)$/\n      if data\n        [type, payload] = JSON.parse(data[1])\n        if type is 'txsUpdate'\n          delay = 1000 / payload.data.pending.length\n          for tx in payload.data.pending\n            setTimeout (-> txCb? {\n                amount: tx.value / 1000000000000000000\n                fee: tx.gas * tx.gasPrice / 1000000000000000000\n                link: 'https://etherscan.io/tx/0x' + tx.hash_b\n                donation: tx.to_b is @donationAddress\n              }), delay\n            delay += delay\n        else\n          blockCb? count: payload.data[0].txs.length\n\n  stop: ->\n    @ws.close()\n    clearInterval @ping\n    @ws = null\n"
  ]
}